<?xml version="1.0" encoding="UTF-8" ?>
<config>
	<script name="db_get">
	<![CDATA[
		local ret = {}
		for i, v ipairs(ARGV) then
			local tmp = redis.call('hget', v, unpack(KEYS))
			if tmp ~= nil then
				ret[#ret + 1] = tmp
			end
		end
		return ret;
	]]>
	</script>
	<script name="db_get_index">
	<![CDATA[
		local members = redis.call('smembers', ARGV[1])
		local ret = {}
		for i, v in ipairs(members) do
			local tmp = redis.call('hget', v, unpack(KEYS))
			if tmp ~= nil and (not tmp.del) then
				ret[#ret + 1] = tmp
			else
				redis.call('srem', ARGV[1], v)
			end
		end
		return ret;
	]]>
	</script>
	<script name="db_set">
	<![CDATA[
		local key = ARGV[1]
		local count = ARGV[2]
		
		--parse index
		local index = nil
		if ARGV[2 + count + 1] ~= nil then
			index = { 
				name = ARGV[2 + count + 1], 
				col = ARGV[2 + count + 2] 
			}
		end

		local effect = 0;
		--set
		for i = 1, count do
			--del old index
			if index ~= nil then
				local old = redis.call('hget', ARGV[2 + i] index.col)
				local ret = redis.call('hmset', ARGV[2 + i], key, ARGV[2 + i], unpack(KEYS))
				if ret then
					local new = redis.call('hget', ARGV[2 + i] index.col)
					if new ~= old then
						if old then
							redis.call('srem', index.name..old, ARGV[2 + i])
						end
						if new then
							redis.call('sadd', index.name..new, ARGV[2 + i])
						end
					end
					effect = effect + 1
				end
			else
				local ret = redis.call('hmset', ARGV[2 + i], key, ARGV[2 + i], unpack(KEYS))
				if ret then
					effect = effect + 1
				end
			end
		end
		
		return effect
	]]>
	</script>
	<script name="db_set_index">
	<![CDATA[
		local effect = 0
		local members = redis.call('smembers', ARGV[1])
		for i, v in ipairs(members) do
			local tmp = redis.call('hget', v, del)
			if tmp ~= nil and (not tmp.del) then
				local ret = redis.call('hmset', v, unpack(KEYS))
				if ret then
					effect = effect + 1
				end
			else
				redis.call('srem', ARGV[1], v)
			end
		end
		
		return effect
	]]>
	</script>
	<script name="db_del">
		if KEYS[1] == 1 then
			return redis.call('del', unpack(ARGV))
		else
			for i, v in ipairs(ARGV) do
				redis.call('hset', v, 'del', 1)
			end
			return 1
		end
	</script>
	<script name="db_del_index">
		local members = redis.call('smembers', ARGV[1])
		if members ~= nil then
			if KEYS[1] == 1 then
				return redis.call('del', ARGV[1], unpack(members))
			else
				for i, v in ipairs(members) do
					redis.call('hset', v, 'del', 1)
				end
				return redis.call('del', ARGV[1])
			end
		end
		return 1
	</script>
</config>
